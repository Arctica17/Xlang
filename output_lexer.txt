TOKEN_IDENTIFIER: x
TOKEN_EQUALS: =
TOKEN_INT: 0
TOKEN_SEMICOLON: ;
TOKEN_IDENTIFIER: y
TOKEN_EQUALS: =
TOKEN_INT: 10
TOKEN_SEMICOLON: ;
TOKEN_IDENTIFIER: array
TOKEN_EQUALS: =
TOKEN_LEFT_SQUARE_BRACKET: [
TOKEN_INT: 0
TOKEN_COMMA: ,
TOKEN_INT: 1
TOKEN_COMMA: ,
TOKEN_INT: 2
TOKEN_COMMA: ,
TOKEN_INT: 3
TOKEN_COMMA: ,
TOKEN_INT: 4
TOKEN_RIGHT_SQUARE_BRACKET: ]
TOKEN_SEMICOLON: ;
TOKEN_IDENTIFIER: map
TOKEN_EQUALS: =
TOKEN_LEFT_CURLY_BRACE: {
TOKEN_STRING: name
TOKEN_COLON: :
TOKEN_STRING: Alice
TOKEN_RIGHT_CURLY_BRACE: }
TOKEN_SEMICOLON: ;
TOKEN_FUNCTION: function
TOKEN_IDENTIFIER: init
TOKEN_LEFT_PAREN: (
TOKEN_RIGHT_PAREN: )
TOKEN_LEFT_CURLY_BRACE: {
TOKEN_IDENTIFIER: x
TOKEN_EQUALS: =
TOKEN_INT: 1
TOKEN_PLUS: +
TOKEN_INT: 2
TOKEN_SEMICOLON: ;
TOKEN_FOR: for
TOKEN_LEFT_PAREN: (
TOKEN_IDENTIFIER: i
TOKEN_COLON: :
TOKEN_INT: 0
TOKEN_COMMA: ,
TOKEN_INT: 10
TOKEN_RIGHT_PAREN: )
TOKEN_LEFT_CURLY_BRACE: {
TOKEN_IDENTIFIER: array
TOKEN_LEFT_SQUARE_BRACKET: [
TOKEN_IDENTIFIER: i
TOKEN_RIGHT_SQUARE_BRACKET: ]
TOKEN_EQUALS: =
TOKEN_IDENTIFIER: i
TOKEN_SEMICOLON: ;
TOKEN_RIGHT_CURLY_BRACE: }
TOKEN_RIGHT_CURLY_BRACE: }
TOKEN_FUNCTION: function
TOKEN_IDENTIFIER: max
TOKEN_LEFT_PAREN: (
TOKEN_RIGHT_PAREN: )
TOKEN_LEFT_CURLY_BRACE: {
TOKEN_IF: if
TOKEN_LEFT_PAREN: (
TOKEN_IDENTIFIER: a
TOKEN_GREATER_EQUAL: >=
TOKEN_IDENTIFIER: b
TOKEN_RIGHT_PAREN: )
TOKEN_RETURN: return
TOKEN_IDENTIFIER: a
TOKEN_SEMICOLON: ;
TOKEN_ELSE: else
TOKEN_RETURN: return
TOKEN_IDENTIFIER: b
TOKEN_SEMICOLON: ;
TOKEN_RIGHT_CURLY_BRACE: }
TOKEN_MAIN: main
TOKEN_LEFT_PAREN: (
TOKEN_RIGHT_PAREN: )
TOKEN_LEFT_CURLY_BRACE: {
TOKEN_IDENTIFIER: init
TOKEN_LEFT_PAREN: (
TOKEN_RIGHT_PAREN: )
TOKEN_SEMICOLON: ;
TOKEN_IDENTIFIER: x
TOKEN_EQUALS: =
TOKEN_IDENTIFIER: max
TOKEN_LEFT_PAREN: (
TOKEN_IDENTIFIER: x
TOKEN_COMMA: ,
TOKEN_IDENTIFIER: y
TOKEN_RIGHT_PAREN: )
TOKEN_SEMICOLON: ;
TOKEN_RIGHT_CURLY_BRACE: }
